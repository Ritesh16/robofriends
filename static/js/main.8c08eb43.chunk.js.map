{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","action.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","name","id","email","className","alt","src","CardList","robots","map","user","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChanged","isPending","filteredRobots","filter","robot","toLowerCase","includes","React","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"wQAeeA,EAbJ,SAACC,GAAS,IACVC,EAAiBD,EAAjBC,KAAMC,EAAWF,EAAXE,GAAIC,EAAOH,EAAPG,MACjB,OACI,yBAAKC,UAAU,mDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BJ,EAA1B,cACrB,6BACK,4BAAKD,GACL,2BAAIE,MCONI,EAdA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACd,OACI,6BAEKA,EAAOC,KAAI,SAAAC,GACP,OACA,kBAAC,EAAD,CAAMC,IAAKD,EAAKR,GAAIA,GAAIQ,EAAKR,GAAID,KAAMS,EAAKT,KAAME,MAAOO,EAAKP,aCK/DS,EAXC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACd,OACI,2BACCT,UAAU,mCACVU,KAAK,SACLC,YAAY,eACZC,SAAUH,KCEJI,EARA,SAACjB,GACX,OACI,yBAAKkB,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChErB,EAAMsB,WCoBJC,G,wDAtBZ,WAAYvB,GAAO,IAAD,8BACd,cAAMA,IAEDwB,MAAM,CACPC,UAAU,GAJA,E,8DAQAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACH,iDAGAG,KAAK5B,MAAMsB,a,GAlBDQ,c,OCwBtBC,E,kLAGEH,KAAK5B,MAAMgC,oB,+BAGL,IAAD,EACqDJ,KAAK5B,MAAxDiC,EADF,EACEA,YAAaC,EADf,EACeA,gBAAiB1B,EADhC,EACgCA,OAAQ2B,EADxC,EACwCA,UACvCC,EAAiB5B,EAAO6B,QAAO,SAAAC,GACjC,OAAOA,EAAMrC,KAAKsC,cAAcC,SAASP,EAAYM,kBAGzD,OAAOJ,EACH,wBAAI/B,UAAU,MAAd,eAEI,yBAAKA,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWS,aAAcqB,IACzB,6BACI,kBAAC,EAAD,KACI,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU1B,OAAQ4B,Y,GArBzBK,IAAMX,WA8BTY,eA/CS,SAAAlB,GACrB,MAAO,CACNS,YAAcT,EAAMmB,aAAaV,YACjCzB,OAAQgB,EAAMoB,cAAcpC,OAC5B2B,UAAWX,EAAMoB,cAAcT,UAC/BT,MAAOF,EAAMoB,cAAclB,UAKJ,SAACmB,GACxB,MAAO,CACHX,gBAAkB,SAACY,GAAD,OAAYD,ECdG,CACtC/B,KCRgC,sBDShCiC,QDY2DD,EAAME,OAAOC,SACnEjB,gBAAkB,SAACc,GAAD,OAAWD,GCVF,SAACA,GACjCA,EAAS,CAAE/B,KCXwB,2BDYnCoC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIT,EAAS,CAAC/B,KCbW,yBDamBiC,QAASO,OAC9DC,OAAM,SAAA7B,GAAK,OAAImB,EAAS,CAAC/B,KCbQ,wBDaqBiC,QAASrB,cDuCpDgB,CAA6CX,GG5CxCyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iBChBAC,EAAqB,CACvB5B,YAAc,IAaZ6B,EAAqB,CACvBtD,OAAQ,GACR2B,WAAW,G,gBCNT4B,EAASC,yBAETC,EAAeC,YAAgB,CAACvB,aDRV,WAA4C,IAA3CnB,EAA0C,uDAAlCqC,EAAoBM,EAAc,uDAAP,GAC5D,OAAOA,EAAOrD,MACV,IFR2B,sBESxB,OAAQsD,OAAOC,OAAO,GAAI7C,EAAO,CAACS,YAAakC,EAAOpB,UAEzD,QACG,OAAOvB,ICEkCoB,cDOvB,WAA4C,IAA3CpB,EAA0C,uDAAlCsC,EAAoBK,EAAc,uDAAP,GAC7D,OAAOA,EAAOrD,MACV,IFrB8B,yBEsB3B,OAAQsD,OAAOC,OAAO,GAAI7C,EAAO,CAAEW,WAAW,IAEjD,IFvB8B,yBEwB3B,OAAQiC,OAAOC,OAAO,GAAI7C,EAAO,CAAEW,WAAW,EAAO3B,OAAQ2D,EAAOpB,UAEvE,IFzB6B,wBE0B1B,OAAQqB,OAAOC,OAAO,GAAI7C,EAAO,CAAEE,MAAOyC,EAAOpB,UAEpD,QACG,OAAOvB,MCjBZ8C,EAAQC,YAAYN,EAAcO,YAAgBC,IAAiBV,IAEzEW,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,QAGJO,SAASC,eAAe,SF2GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEd5B,OAAM,SAAA7B,GACL0D,QAAQ1D,MAAMA,EAAM2D,c","file":"static/js/main.8c08eb43.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card=(props)=>{\r\n    const {name, id, email}=props;\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow shadow-5'>\r\n            <img alt='_photo' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                 <h2>{name}</h2>\r\n                 <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from \"./Card\";\r\nconst CardList=({robots})=>{\r\n   return(\r\n       <div>\r\n          {\r\n            robots.map(user=>{\r\n                return( \r\n                <Card key={user.id} id={user.id} name={user.name} email={user.email}/>\r\n             )})\r\n          } \r\n       </div>\r\n   );\r\n\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox=({searchChange})=>{\r\n    return (\r\n        <input \r\n         className='pa3 ba b--green bg-lightest-blue'\r\n         type='search' \r\n         placeholder='search robot'\r\n         onChange={searchChange}\r\n         />\r\n    );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n     return(\r\n         <div style={{overflow: 'scroll', border: '2px solid black', height: '700px'  }}>\r\n            {props.children}\r\n         </div>\r\n         );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n   constructor(props){\r\n       super(props);\r\n\r\n       this.state={\r\n           hasError: false\r\n       }\r\n   }\r\n\r\n   componentDidCatch(error, info){\r\n       this.setState({hasError: true});\r\n   }\r\n\r\n   render(){\r\n       if(this.state.hasError){\r\n           return <div>This is not good</div>\r\n       }\r\n       else{\r\n           return this.props.children;\r\n       }\r\n   }\r\n} \r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport  './App.css';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport {connect}  from 'react-redux';\r\nimport { setSearchField, requestRobots } from '../action';\r\n\r\nconst mapStateToProps = state => {\r\n   return {\r\n    searchField : state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n   }\r\n};\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return {\r\n        onSearchChanged : (event) =>  dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots : (event) => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends React.Component{\r\n  \r\n    componentDidMount(){\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const {searchField, onSearchChanged, robots, isPending} = this.props;\r\n        const filteredRobots = robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n\r\n        return isPending ?\r\n            <h1 className='f1'>Loading....</h1> :   \r\n       \r\n                <div className='tc'>\r\n                 <h1 className='f1'>RoboFriends</h1>\r\n                 <SearchBox searchChange={onSearchChanged}/>\r\n                 <div>\r\n                     <Scroll>\r\n                         <ErrorBoundary>\r\n                         <CardList robots={filteredRobots}/>\r\n                         </ErrorBoundary>\r\n                     </Scroll>\r\n                 </div>\r\n                </div>\r\n        }\r\n    \r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n   CHANGE_SEARCH_FIELD,\r\n   REQUEST_ROBOTS_SUCCESS,\r\n   REQUEST_ROBOTS_PENDING,\r\n   REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n   type: CHANGE_SEARCH_FIELD,\r\n   payload: text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n   dispatch({ type: REQUEST_ROBOTS_PENDING});\r\n   fetch('https://jsonplaceholder.typicode.com/users')\r\n   .then(response => response.json())\r\n   .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n   .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}));\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS } from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField : ''\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action={}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n           return  Object.assign({}, state, {searchField: action.payload});\r\n        \r\n        default:\r\n           return state;    \r\n    }\r\n};\r\n\r\nconst initialStateRobots = {\r\n    robots: [],\r\n    isPending: true\r\n  }\r\n\r\nexport const requestRobots = (state = initialStateRobots, action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n           return  Object.assign({}, state, { isPending: true});\r\n\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n           return  Object.assign({}, state, { isPending: false, robots: action.payload});\r\n\r\n        case REQUEST_ROBOTS_FAILED:\r\n           return  Object.assign({}, state, { error: action.payload});\r\n        \r\n        default:\r\n           return state;    \r\n    }\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {searchRobots, requestRobots} from './reducers';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\n\nconst rootReducers = combineReducers({searchRobots, requestRobots })\n\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}